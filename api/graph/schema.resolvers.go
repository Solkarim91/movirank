package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/solkarim91/movirank/api/graph/model"
)

// CreateMovie is the resolver for the CreateMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.MovieInput) (*model.Movie, error) {
	movie, err := r.MovieRepository.CreateMovie(&input)
	movieCreated := &model.Movie{
		Title:       movie.Title,
		Description: movie.Description,
		Genre:       movie.Genre,
		Runtime:     movie.Runtime,
		Released:    movie.Released,
		ID:          movie.ID,
	}
	if err != nil {
		return nil, err
	}
	return movieCreated, nil
}

// DeleteMovie is the resolver for the DeleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, id string) (string, error) {
	err := r.MovieRepository.DeleteMovie(id)
	if err != nil {
		return "", err
	}
	successMessage := "successfully deleted"
	return successMessage, nil
}

// UpdateMovie is the resolver for the UpdateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, id string) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateMovie - UpdateMovie"))
}

// GetMovies is the resolver for the getMovies field.
func (r *queryResolver) GetMovies(ctx context.Context) ([]*model.Movie, error) {
	movies, err := r.MovieRepository.GetMovies()
	if err != nil {
		return nil, err
	}
	return movies, nil
}

// GetOneMovie is the resolver for the getOneMovie field.
func (r *queryResolver) GetOneMovie(ctx context.Context, id string) (*model.Movie, error) {
	movie, err := r.MovieRepository.GetMovie(id)
	selectedMovie := &model.Movie{
		ID:          movie.ID,
		Title:       movie.Title,
		Description: movie.Description,
		Genre:       movie.Genre,
		Runtime:     movie.Runtime,
		Released:    movie.Released,
		Img:         movie.Img,
	}
	if err != nil {
		return nil, err
	}
	return selectedMovie, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
