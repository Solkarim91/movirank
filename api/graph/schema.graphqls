scalar Time

type Query {
  getMovies: [Movie!]!
  getOneMovie(id: ID!): Movie!
  getRatingsByMovieId(movieId: ID!): [Rating!]!
}

type Mutation {
  createMovie(input: CreateMovieInput!): Movie!
  deleteMovie(id: ID!): String!
  updateMovie(input: UpdateMovieInput!): String!
  createRating(input: CreateRatingInput!): Rating!
}

type Movie {
  id: ID!
  title: String!
  description: String!
  director: String!
  cast: [String!]
  genre: String!
  runtime: Float!
  released: Int!
  img: String!
  ratings: [Rating!]!
}

input CreateMovieInput {
  title: String!
  description: String!
  director: String!
  cast: [String!]
  genre: String!
  runtime: Float!
  released: Int!
  img: String!
}

input UpdateMovieInput {
  id: ID!
  title: String!
  description: String!
  director: String!
  cast: [String!]
  genre: String!
  runtime: Float!
  released: Int!
  img: String!
}

type Rating {
  id: ID!
  movieId: ID!
  createdAt: Time!
  updatedAt: Time!
  message: String!
  star: Int!
}

input CreateRatingInput {
  movieId: ID!
  message: String!
  star: Int!
}

input UpdateRatingInput {
  id: ID!
  movieId: ID!
  message: String!
  star: Int!
}

input DeleteRatingInput {
  id: ID!
  movieId: ID!
}
